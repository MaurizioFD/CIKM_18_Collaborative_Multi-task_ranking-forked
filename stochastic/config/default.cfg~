[prob]
# regularization parameter
lambda = 1

# we use it as a relative learning rate: lr_mf (the learning rate for regression) = lr_pair * gamma;
gamma = 0.01

# model rank (for low-rank approximation)
rank = 20

# algorithm : pairregssgd, pairregsgd, pairssgd, hybridrank
algorithm = hybridrank

# the maximum number of outer iterations  or the number of samples (defend on the number of samples)
max_outer_iter = 10

# stopping criterion
tol = 1e-5

# evaluate using test set after each outer iteration? (1 if yes, 0 otherwise) 
evaluate = true

[input]
# type : numeric
type = numeric

# file names for trainig and test sets
train_rating_file			   = util/data/ml100k_train_rating_0.5.rating
itemwise_train_comps_file          = util/data/ml100k_train_user_rating_pairs_0.5.pair
userwise_train_comps_file          = util/data/ml100k_train_item_rating_pairs_0.5.pair
itemwise_test_file           = util/data/ml100k_test_user_0.5.lsvm
userwise_test_file           = util/data/ml100k_test_item_0.5.lsvm

[par]
# number of openmp threads
nthreads = 16

[sgd and pairregsgd]
# stepsize is recommended to use 1e-2 when N=10, and 5e-2 when N=20 and N=50... Or 1e-2 for all
step_size = 0.005

[balance factor]
# the hyperparameters to set for weighting different loss functions
alpha = 0.5
beta = 0.1

SGD = true
SSGD = true

[hybrid_update_choice]
# 1: regular pairwise update; 2: update U with regression loss and update V with pairwise loss; 3: update U using column pairwise and update V using row pairwise; 0: only update V
update_choice = 2

